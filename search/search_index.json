{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducing PyAction","text":"<p>PyAction is a Cookiecutter template that allows you to develop GitHub Actions using Python language. This documentation covers a fundamental overview of the project, a demo action, and the keynotes you need to remember if you want to push your actions to the GitHub Marketplace.</p> your-awesome-action/main.py<pre><code>import os\nimport sys\nfrom typing import List\n\nfrom actions import io\n\n\ndef main(args: List[str]) -&gt; None:\n    \"\"\"main function\n\n    Args:\n        args (list[str]): STDIN arguments\n    \"\"\"\n\n    name = os.environ[\"INPUT_NAME\"] #(1)\n\n    io.write_to_output(\n      {\n        \"message\": f\"Hi {name}!\" #(2)\n      }\n    )\n\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])\n</code></pre> <ol> <li> <p>Simply read the values that your action users send via the <code>with</code> statement within their workflow YAML file.</p> .github/workflows/main.yml<pre><code>steps:\n  - uses: you/your-action@v0.1.0\n    with:\n      name: John\n</code></pre> <p>Warning</p> <p>Keep in mind that you have to update the <code>action.yml</code> file in order to support receiving the <code>name</code> variable from the users respectively.</p> </li> <li> <p>Here is how you can return data to the workflow, store it, and use it as inputs for other steps inside your workflow. To retrieve <code>message</code>, give an <code>id</code> to your action execution step and then access the value via <code>${{ steps.&lt;id&gt;.outputs.message }}</code>.</p> .github/workflows/main.yml<pre><code>steps:\n  - id: greetings\n    name: Using your-action\n    uses: you/your-action@v0.1.0\n    with:\n      name: John\n\n  - name: Echo message\n    run: |\n      echo ${{ steps.greetings.outputs.message }}\n</code></pre> </li> </ol>"},{"location":"#in-theory","title":"In Theory","text":"<p>Custom GitHub Actions can be developed in three ways.</p> <ul> <li>Docker-based Actions</li> <li>Javascript Actions</li> <li>Composite Actions</li> </ul> <p>PyAction is based on the Dockerfile implementation that GitHub recommends and has some workflow-related features that allow you to have access to the variables and data transferring during your workflow run.</p>"},{"location":"#installation","title":"Installation","text":"<p>The first step is to install the <code>cookiecutter</code> package on your machine.</p> <pre><code>pip install -U cookiecutter\n</code></pre> <p>To ensure that the installation process was successful, check out the installed version with the <code>-V</code> flag.</p> <pre><code>cookiecutter -V\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Now, it's time to generate a template. Easily do this via the following command and after a few promptings, you'll have your action created!</p> <pre><code>cookiecutter gh:lnxpy/cookiecutter-pyaction\n</code></pre> <p>In the next section, we'll be taking a look over each question that's being asked and the proper answers you can give to each one.</p>"},{"location":"#promting","title":"Promting","text":"<p>These are the questions that by answering them, you'll have the most suited action for your case.</p>"},{"location":"#action_name","title":"<code>action_name</code>","text":"<p>The name that you choose from your action.</p> <p>If you want to publish to the marketplace..</p> <p>Make sure that the slugged version of your action name is unique. To check if it's unique, all the following URLs should lead you to a 404 page.</p> <ul> <li>https://github.com/marketplace/actions/[slugged-action-name]</li> <li>https://github.com/[slugged-action-name]</li> <li>https://github.com/orgs/[slugged-action-name]</li> </ul>"},{"location":"#action_slug","title":"<code>action_slug</code>","text":"<p>Slugged version of your action name. The best option is to leave it as how it is by default.</p>"},{"location":"#description","title":"<code>description</code>","text":"<p>A short description for your action. GitHub will use this description to showcase your action on their action explore page.</p>"},{"location":"#auther_name","title":"<code>auther_name</code>","text":"<p>The action author's name. You can put your both first and last name together.</p>"},{"location":"#open_source_license","title":"<code>open_source_license</code>","text":"<p>Choose an open-source license or <code>notopensource</code> if your action is not open-source.</p>"},{"location":"#python_version","title":"<code>python_version</code>","text":"<p>The Python version that you want to use in your action. Both Python3.X and Python2.X are supported.</p>"},{"location":"#include_dependencies","title":"<code>include_dependencies</code>","text":"<p>Answer <code>y</code> if your action has some additional dependencies. This option creates a <code>requirements.txt</code> file and adds a new Dockerfile layer before your action execution whereas it ensures that all your action dependencies are installed.</p>"},{"location":"#include_cicd_testing","title":"<code>include_cicd_testing</code>","text":"<p>Creats a <code>.github/workflows/test.yml</code> basic configuration for self-testing your action.</p>"},{"location":"contact/","title":"Contact","text":"<p>I'm Sadra, the creator of PyAction. If you have any questions, need any help, or have a change request, feel free to reach out to me on various platforms such as E-mail, X, and LinkedIn.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thanks for heading over to this index. I assume you're looking for a way to contributing to this project and as always, all your helps are welcome. Follow the instructions in the next sections.</p> <p>Open an issue first please..</p> <p>I highly recommend you open an issue first. Once we agree on the theory, then feel free to get your hands dirty. </p>"},{"location":"contributing/#fork-install","title":"Fork &amp; Install","text":"<p>Simply fork and clone the repository on your local machine. Change your directory to where the project is. Run the following command to make sure you have <code>pre-commit</code> and <code>tox</code> installed on your system.</p> <pre><code>pip install pre-commit tox &amp;&amp; pre-commit install\n</code></pre> <p>Once you're all set and need to test your changes in the supported environments, simply run <code>tox</code> and it'll grab your changes and puts them into test.</p> <p>If you've changed the docs and want to see the resuls, run the following command and it'll serve your docs on <code>localhost:8000</code>.</p> <pre><code>tox -e docs -- serve\n</code></pre> Access the <code>venv</code> that <code>tox</code> has created.. <p>If you need to access an environment with all the dev dependencies installed, run the following command and it'll create a virtualenv with all the requiremenets installed in it.</p> <pre><code>tox --devenv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"contributing/#make-a-pull-request","title":"Make a Pull Request","text":"<p>If all tests are passed then open a pull-request. </p>"},{"location":"demo/","title":"Hello-world Demo Action","text":"<p>In this demo tutorial, we'll put our hands on a simple hello-world action created. This demo tutorial is based on the latest version of PyAction.</p>"},{"location":"demo/#initialization","title":"Initialization","text":"<p>Let's generate our action and name it something unique so that we can publish it to the marketplace.</p> <p>Before you start this tutorial..</p> <p>Follow the Installation section to make <code>cookiecutter</code> available on your machine.</p> <pre><code>cookiecutter gh:lnxpy/cookiecutter-pyaction\n</code></pre> <p>And here would be the prompting for my action called <code>PyAction Hello World</code></p> <pre><code>[1/8] action_name (My Awesome Action): PyAction Hello World\n[2/8] action_slug (pyaction-hello-world):\n[3/8] description (A short description..): This actions says Hello to you!\n[4/8] author_name (John Doe): &lt;username&gt;\n[5/8] Select open_source_license\n  1 - mit\n  2 - bsd\n  3 - apache\n  4 - gplv3\n  5 - notopensource\n  Choose from [1/2/3/4/5] (1):\n[6/8] Select python_version\n  1 - 3\n  2 - 2\n  Choose from [1/2] (1):\n[7/8] include_dependencies (n):\n[8/8] include_cicd_testing (n):\n</code></pre> <p>What if we wanted to publish to the marketplace..</p> <p>GitHub Marketplace is a platform where thousands of actions and GitHub Apps are being hosted and developed. You can also publish your actions and third-party applications there too.</p> <p>To do so, make sure that <code>pyaction-hello-world</code> is a unique action name. Thus, we have to check the following URLs and make sure they all end up being 404 pages.</p> <ul> <li><code>https://github.com/pyaction-hello-world</code></li> <li><code>https://github.com/orgs/pyaction-hello-world</code></li> <li><code>https://github.com/marketplace/actions/pyaction-hello-world</code></li> </ul> <p>Here is a tree-look of what have so far. The files we necessarily need to modify based on our criteria are highlighted.</p> <pre><code>pyaction-hello-world\n\u251c\u2500\u2500 .dockerignore\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 action.yml\n\u251c\u2500\u2500 actions\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 io.py\n\u2514\u2500\u2500 main.py\n</code></pre>"},{"location":"demo/#development","title":"Development","text":"<p>Once we get our action initialized, it's time to initialize a Git directory so that we can push it to a GitHub repository and track all the changes.</p> <pre><code>cd pyaction-hello-world &amp;&amp; git init &amp;&amp; git add .\ngit commit -m \"Initial commit\"\ngit branch -M main\ngit remote add origin git@github.com:&lt;username&gt;/pyaction-hello-world.git # (1)\n</code></pre> <ol> <li>Replace <code>&lt;username&gt;</code> with your GitHub username or organization.</li> </ol> <p>There are a few files that you need to update in order to make your action properly work. That's what our next sub-sections are about.</p>"},{"location":"demo/#actionyml","title":"<code>action.yml</code>","text":"<p>This YAML file indicates the basic configurations of our action. We can define our action name, description, and branding there. More importantly, this is where we declare the inputs and outputs of our action. So head over to the <code># == inputs and outputs ==</code> line where you should define the inputs.</p> <p>Since our action has only one <code>name</code> input, simply declare it as follows.</p> pyaction-hello-world/action.yml<pre><code># == inputs and outputs ==\n\ninputs:\n  name:\n    required: false\n    description: the person/thing you want to greet\n    default: World\n</code></pre> <p>Our action has an output <code>phrase</code> too. Define this in the following way.</p> <pre><code>outputs:\n  phrase:\n    description: output message\n</code></pre>"},{"location":"demo/#mainpy","title":"<code>main.py</code>","text":"<p>This is the main file of our action. In this file, we have access to all the inputs that users have passed through as well as the outputs that we can send back to the workflow. All we need to do is to retrieve the <code>name</code> and return the <code>phrase</code> that contains the greeting message.</p> pyaction-hello-world/main.py<pre><code>import os\nimport sys\nfrom typing import List\n\nfrom actions import io\n\n\ndef main(args: List[str]) -&gt; None:\n    \"\"\"main function\n\n    Args:\n        args: STDIN arguments\n    \"\"\"\n\n    # reading the name variable from `with`\n    name = os.environ[\"INPUT_NAME\"]\n    message = f\"Hello {name}!\"\n\n    # writing to the buffer\n    io.write_to_output({\"phrase\": message})\n\n    # now, people can echo `phrase`\n\n\nif __name__ == \"__main__\":\n    main(sys.argv)\n</code></pre>"},{"location":"demo/#dependencies","title":"Dependencies","text":"<p>Follow this section if your action needs some additional packages installed in order to work.</p> Using a virtual environment <p>This step is optional. If you want to, you can install the dependencies inside a virtual-env other than your global site packages. Make sure that you've activated your environment.</p> <pre><code>virtualenv venv\nsource venv/bin/activate\n</code></pre> <pre><code>pip install PACK1 PACK2==v1.2.3 PACK3\n</code></pre> <p>Finally, update the <code>requirements.txt</code> file.</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Since the <code>pyaction-hello-world</code> doesn't need any requirements, answering <code>n</code> to the <code>include_dependencies</code> prompt is enough.</p>"},{"location":"demo/#testing-locally","title":"Testing Locally","text":"<p>To test our action locally, there is a <code>.env</code> file included in our action directory. We have to add the <code>INPUT_NAME</code> environment variable to it and run our <code>main.py</code> file with this variable declared in a session. To make sure that <code>message</code> has the correct content that we want, I put a temporary <code>print(message)</code> at the end of the <code>main()</code> function and removed it after testing my action on my local machine.</p> pyaction-hello-world/.env<pre><code>GITHUB_OUTPUT=/dev/null\n\nINPUT_NAME=Armita\n</code></pre> pyaction-hello-world/main.py<pre><code>def main(args: List[str]) -&gt; None:\n    ...\n    print(message)\n</code></pre> <p>In order to test the action, run the following command and you'll see the content of <code>message</code>.</p> <pre><code>env $(cat .env | xargs) python main.py\n</code></pre> <pre><code>Hello Armita!\n</code></pre> <p>Now, remove the printing line from <code>main.py</code> and commit your changes once again.</p> <pre><code>git add . &amp;&amp; git commit -m 'updated'\n</code></pre> <p>Tag your current state and push your changes to the repository.</p> <pre><code>git tag v0.1.0\ngit push origin main --tags\n</code></pre>"},{"location":"demo/#deployment-usage","title":"Deployment &amp; Usage","text":"<p>If you want to self-test your action on each <code>git push</code> event, you simply need to answer <code>y</code> to <code>include_cicd_testing</code> prompt so it'll create a workflow for your action. Make sure to modify it and update its inputs.</p> <p>This demo is also live..</p> <p>The <code>pyaction-hello-world</code> implementation in this tutorial is available here. Feel free to look over it.</p>"},{"location":"demo/#publish-to-marketplace","title":"Publish to Marketplace","text":"<p>For more information about how you can ship your actions to the GitHub Marketplace, refer to the official docs.</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2023 Sadra Yahyapour</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}